FROM debian:bullseye-slim

# Install dependencies
RUN apt-get update && apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    lsb-release \
    sudo \
    maven \
    openjdk-17-jdk \
    docker.io \
    buildah \
    runc

# Install Docker (from official Docker repository)
RUN curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
RUN echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \
    $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
RUN apt-get update && apt-get install -y docker-ce docker-ce-cli containerd.io

# Verify installations
RUN mvn --version
RUN docker --version
RUN buildah --version
RUN runc --version






previous working pipeline : 
pipeline {
    agent {
        kubernetes {
            label 'jenkins-agent'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  name: jenkins-agent
  labels:
    jenkins-agent: true
spec:
  serviceAccountName: jenkins-agent-sa
  containers:
  - name: jnlp
    image: jenkins/inbound-agent:latest
    args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
    workingDir: /var/lib/jenkins/workspace  # Update this
    tty: true
    volumeMounts:
    - name: workspace-volume
      mountPath: /var/lib/jenkins/workspace  # Update this
    securityContext:
      runAsUser: 1000
      fsGroup: 1000
    resources:
      limits:
        cpu: "1"
        memory: "1Gi"
      requests:
        cpu: "500m"
        memory: "512Mi"
  - name: maven
    image: hatemnefzi/maven-docker:latest
    command:
    - cat
    tty: true
    workingDir: /var/lib/jenkins/workspace  # Update this
    volumeMounts:
    - name: workspace-volume
      mountPath: /var/lib/jenkins/workspace  # Update this
    - name: docker-socket
      mountPath: /var/run/docker.sock
    resources:
      limits:
        cpu: "1"
        memory: "1Gi"
      requests:
        cpu: "500m"
        memory: "512Mi"
  - name: kubectl
    image: alpine/k8s:1.25.10  # Includes kubectl + shell
    command: ['sleep']
    args: ['3600']
    tty: true
    workingDir: /var/lib/jenkins/workspace  # Update this
    volumeMounts:
    - name: workspace-volume
      mountPath: /var/lib/jenkins/workspace  # Update this
    - name: kube-config
      mountPath: /root/.kube
  volumes:
  - name: workspace-volume
    hostPath:
      path: /var/lib/jenkins/workspace  # Mount the Jenkins workspace directory
  - name: docker-socket
    hostPath:
      path: /var/run/docker.sock
  - name: kube-config
    hostPath:
      path: /var/lib/jenkins/.kube
"""
        }
    }

    environment {
        DOCKER_IMAGE = "hatemnefzi/spring-boot-app:latest"
        KUBE_CONFIG_PATH = "/var/lib/jenkins/.kube/config"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],  // Check out the 'main' branch
                    extensions: [],
                    userRemoteConfigs: [[
                        url: 'git@github.com:hatem-nefzi/springboot-cicd.git',
                        credentialsId: 'SSH'  // Use the correct credentials ID
                    ]]
                ])
            }
        }

        

        stage('Build') {
            steps {
                container('maven') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Run Gatling Tests') {
            steps {
                container('maven') {
                    sh 'mvn gatling:test'
                }
            }
            post {
                always {
                    // Archive Gatling reports
                    archiveArtifacts artifacts: 'target/gatling/**/*', allowEmptyArchive: true
                    // Publish Gatling reports (optional)
                    gatlingArchive()
                }
            }
        }

        stage('Clean Playwright Cache') {
            steps {
                container('maven') {
                    sh 'rm -rf /home/jenkins/agent/playwright-browsers'
                    sh 'mvn exec:java -Dexec.mainClass="com.microsoft.playwright.CLI" -Dexec.args="install --force"'
                }
            }
        }

        stage('Functional Tests') {
            steps {
                container('maven') {
                    sh 'mvn test' // Runs Playwright tests
                }
            }
            post {
                always {
                    script {
                        // Check if test reports exist
                        def testReports = findFiles(glob: 'target/surefire-reports/*.xml')
                        if (testReports) {
                            junit 'target/surefire-reports/*.xml'
                        } else {
                            echo 'No test report files found. Skipping JUnit step.'
                        }
                    }
                    archiveArtifacts artifacts: 'target/surefire-reports/**/*', allowEmptyArchive: true
                }
            }
        }

        stage('Docker Build') {
            steps {
                container('maven') {
                    sh '''
                        docker buildx create --use
                        docker buildx build -t $DOCKER_IMAGE --load .
                    '''
                }
            }
        }

        stage('Debug') {
            steps {
                container('maven') {
                    sh '''
                        echo "PATH: $PATH"
                        which docker
                        docker --version
                    '''
                }
            }
        }

        stage('Docker Push') {
            steps {
                container('maven') {
                    withDockerRegistry([credentialsId: 'docker-hub-credentials', url: 'https://index.docker.io/v1/']) {
                        sh '''
                            echo "PATH: $PATH"
                            echo "Docker version:"
                            docker --version
                            echo "Docker images:"
                            docker images
                            echo "Pushing Docker image: $DOCKER_IMAGE"
                            docker push $DOCKER_IMAGE
                        '''
                    }
                }
            }
        }

stage('Deploy') {
    steps {
        container('kubectl') {
            withCredentials([file(credentialsId: 'kubeconfig-credential', variable: 'KUBECONFIG')]) {
                script {
                    // Use sh with explicit shell
                    sh '''#!/bin/sh
                        echo "Debug: KUBECONFIG is set to ${KUBECONFIG}"
                        cp ${KUBECONFIG} /tmp/kubeconfig
                        chmod 600 /tmp/kubeconfig
                        export KUBECONFIG=/tmp/kubeconfig
                        
                        echo "Current context:"
                        kubectl config current-context
                        
                        echo "Deploying image: ${DOCKER_IMAGE}"
                        kubectl set image deployment/spring-boot-app spring-boot-app=${DOCKER_IMAGE} --record
                        kubectl rollout status deployment/spring-boot-app
                        
                        # Verify deployment
                        kubectl get deployments -o wide
                        kubectl get pods
                    '''
                }
            }
        }
    }
}
    }

    post {
    always {
        // Safe workspace cleanup - only affects current build
        container('maven') {
            sh '''
                echo "Cleaning workspace..."
                rm -rf ${WORKSPACE}/* 2>/dev/null || true
                
                echo "Cleaning Maven cache..."
                mvn dependency:purge-local-repository -DactTransitively=false -DreResolve=false || true
            '''
        }
    }
} 
}